#! /usr/bin/env ruby
#--
# Copyleft meh. [http://meh.doesntexist.org | meh@paranoici.org]
#
# This file is part of faildns.
#
# faildns is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# faildns is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with faildns. If not, see <http://www.gnu.org/licenses/>.
#++

require 'optparse'
require 'faildns/client'

options = {}

OptionParser.new do |o|
	options[:timeout] = 1

	o.on '-s', '--servers SERVER...', Array, 'the servers to use to resolve' do |value|
		options[:servers] = value
	end

	o.on '-t', '--timeout TIMEOUT', Integer, 'the timeout amount' do |value|
		options[:timeout] = value
	end

	o.on '-x', '--reverse', 'make the resolution reverse' do
		options[:reverse] = true
	end
end.parse!

client = DNS::Client.new(options)

ARGV.each {|arg|
	if options[:reverse]
		names = client.resolve(arg, reverse: true, timeout: options[:timeout])

		unless names
			puts "#{arg}: not found"

			next
		end

		if names.length == 1
			puts "#{arg}: #{names.first}"
		else
			puts "#{arg}: #{names.shift}"

			names.each {|ip|
				puts "#{' ' * (arg.length + 2)}#{ip}"
			}
		end
	else
		ipv4 = client.resolve(arg, timeout: options[:timeout])
		ipv6 = client.resolve(arg, version: 6, timeout: options[:timeout])

		unless ipv4 || ipv6
			puts "#{arg}: not found"

			next
		end

		if ipv4.length == 1
			puts "#{arg}: #{ipv4.first}#{" (#{ipv6.first})" if ipv6}"
		else
			puts "#{arg}: #{ipv4.shift}"

			ipv4.each {|ip|
				puts "#{' ' * (arg.length + 2)}#{ip}"
			}
		end
	end
}
